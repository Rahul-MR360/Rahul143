# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TJ93r8PWVq3OyV-oK-uKihf2qNLrdXYI

1. Upload the Dataset
"""

from google.colab import files
uploaded = files.upload()

"""2. Load the Dataset"""

import pandas as pd

df = pd.read_csv('Housing.csv')
df.head()

"""3. Data Exploration"""

df.info()
df.describe()
df.columns

"""4. Check for Missing Values and Duplicates"""

print(df.isnull().sum())
print("Duplicates:", df.duplicated().sum())

"""5. Visualize a Few Features"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.pairplot(df[['price', 'area', 'bedrooms']])
plt.show()

"""6. Identify Target and Features"""

X = df.drop('price', axis=1)
y = df['price']

"""7. Convert Categorical Columns to Numerical"""

X = X.replace({'yes': 1, 'no': 0})
X = X.replace({'furnished': 2, 'semi-furnished': 1, 'unfurnished': 0})

"""8. One-Hot Encoding (if needed)"""

X = pd.get_dummies(X)

"""9. Feature Scaling"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""10. Train-Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

"""11. Model Building"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

"""12. Evaluation"""

from sklearn.metrics import mean_squared_error
import numpy as np

# Predict on the test data
y_pred = model.predict(X_test)

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE:", rmse)

"""13. Make Predictions from New Input"""

sample = X.iloc[0:1]  # Example new data
sample_scaled = scaler.transform(sample)
model.predict(sample_scaled)

"""14. Convert to DataFrame and Encode (Custom Input)"""

def preprocess_input(data_dict):
    df_input = pd.DataFrame([data_dict])
    df_input = df_input.replace({'yes': 1, 'no': 0,
                                 'furnished': 2, 'semi-furnished': 1, 'unfurnished': 0})
    df_input = pd.get_dummies(df_input).reindex(columns=X.columns, fill_value=0)
    return scaler.transform(df_input)

"""15. Predict the Final Grade / Price"""

sample_input = {
    'area': 3000,
    'bedrooms': 3,
    'bathrooms': 3,
    'stories': 2,
    'mainroad': 'yes',
    'guestroom': 'no',
    'basement': 'yes',
    'hotwaterheating': 'no',
    'airconditioning': 'yes',
    'parking': 1,
    'prefarea': 'yes',
    'furnishingstatus': 'semi-furnished'
}

processed = preprocess_input(sample_input)
model.predict(processed)

"""16. Deployment - Building an Interactive App"""

!pip install gradio
import gradio as gr

"""17. Create a Prediction Function"""

def predict_house_price(area, bedrooms, bathrooms, stories, mainroad, guestroom,
                        basement, hotwaterheating, airconditioning, parking,
                        prefarea, furnishingstatus):

    input_data = {
        'area': area,
        'bedrooms': bedrooms,
        'bathrooms': bathrooms,
        'stories': stories,
        'mainroad': mainroad,
        'guestroom': guestroom,
        'basement': basement,
        'hotwaterheating': hotwaterheating,
        'airconditioning': airconditioning,
        'parking': parking,
        'prefarea': prefarea,
        'furnishingstatus': furnishingstatus
    }

    processed = preprocess_input(input_data)
    prediction = model.predict(processed)[0]
    return f"Predicted House Price: â‚¹{prediction:,.2f}"

"""18. Create the Gradio Interface"""

iface = gr.Interface(
    fn=predict_house_price,
    inputs=[
        gr.Number(label="Area (sq ft)"),
        gr.Number(label="Bedrooms"),
        gr.Number(label="Bathrooms"),
        gr.Number(label="Stories"),
        gr.Radio(['yes', 'no'], label="Main Road"),
        gr.Radio(['yes', 'no'], label="Guest Room"),
        gr.Radio(['yes', 'no'], label="Basement"),
        gr.Radio(['yes', 'no'], label="Hot Water Heating"),
        gr.Radio(['yes', 'no'], label="Air Conditioning"),
        gr.Number(label="Parking Spaces"),
        gr.Radio(['yes', 'no'], label="Preferred Area"),
        gr.Dropdown(['furnished', 'semi-furnished', 'unfurnished'], label="Furnishing Status")
    ],
    outputs="text"
)
iface.launch()